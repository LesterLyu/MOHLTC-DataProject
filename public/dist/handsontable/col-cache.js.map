{"version":3,"sources":["../../moh.js/handsontable/col-cache.js"],"names":["colCache","_dictionary","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Math","floor","l2n","l","length","Error","n2l","_hash","validateAddress","value","match","decodeAddress","addr","matchCol","col","colNumber","matchRow","row","rowNumber","parseInt","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","sheetName","reference","startsWith","error","Object","assign","encodeAddress","encode","arguments"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2014-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n// =========================================================================\r\n// Column Letter to Number conversion\r\nvar colCache = {\r\n    _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\r\n    _l2n: {},\r\n    _n2l: [],\r\n    _level: function(n) {\r\n        if (n <= 26) { return 1; }\r\n        if (n <= 26 * 26) { return 2; }\r\n        return 3;\r\n    },\r\n    _fill: function(level) {\r\n        var c, v, l1, l2, l3;\r\n        var n = 1;\r\n        if (level >= 1) {\r\n            while (n <= 26) {\r\n                c = this._dictionary[n - 1];\r\n                this._n2l[n] = c;\r\n                this._l2n[c] = n;\r\n                n++;\r\n            }\r\n        }\r\n        if (level >= 2) {\r\n            while (n <= 26 + (26 * 26)) {\r\n                v = n - (26 + 1);\r\n                l1 = v % 26;\r\n                l2 = Math.floor(v / 26);\r\n                c = this._dictionary[l2] + this._dictionary[l1];\r\n                this._n2l[n] = c;\r\n                this._l2n[c] = n;\r\n                n++;\r\n            }\r\n        }\r\n        if (level >= 3) {\r\n            while (n <= 16384) {\r\n                v = n - ((26 * 26) + 26 + 1);\r\n                l1 = v % 26;\r\n                l2 = Math.floor(v / 26) % 26;\r\n                l3 = Math.floor(v / (26 * 26));\r\n                c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\r\n                this._n2l[n] = c;\r\n                this._l2n[c] = n;\r\n                n++;\r\n            }\r\n        }\r\n    },\r\n    l2n: function(l) {\r\n        if (!this._l2n[l]) {\r\n            this._fill(l.length);\r\n        }\r\n        if (!this._l2n[l]) {\r\n            throw new Error('Out of bounds. Invalid column letter: ' + l);\r\n        }\r\n        return this._l2n[l];\r\n    },\r\n    n2l: function(n) {\r\n        if ((n < 1) || (n > 16384)) {\r\n            throw new Error('' + n + ' is out of bounds. Excel supports columns from 1 to 16384');\r\n        }\r\n        if (!this._n2l[n]) {\r\n            this._fill(this._level(n));\r\n        }\r\n        return this._n2l[n];\r\n    },\r\n\r\n    // =========================================================================\r\n    // Address processing\r\n    _hash: {},\r\n\r\n    // check if value looks like an address\r\n    validateAddress: function(value) {\r\n        if (!value.match(/^[A-Z]+\\d+$/)) {\r\n            throw new Error('Invalid Address: ' + value);\r\n        }\r\n        return true;\r\n    },\r\n\r\n    // convert address string into structure\r\n    decodeAddress: function(value) {\r\n        var addr = this._hash[value];\r\n        if (addr) {\r\n            return addr;\r\n        }\r\n        var matchCol = value.match(/[A-Z]+/);\r\n        var col;\r\n        var colNumber;\r\n        if (matchCol) {\r\n            col = matchCol[0];\r\n            colNumber = this.l2n(col);\r\n        }\r\n        var matchRow = value.match(/\\d+/);\r\n        var row;\r\n        var rowNumber;\r\n        if (matchRow) {\r\n            row = matchRow[0];\r\n            rowNumber = parseInt(row, 10);\r\n        }\r\n\r\n        // in case $row$col\r\n        value = (col || '') + (row || '');\r\n\r\n        var address = {\r\n            address: value,\r\n            col: colNumber,\r\n            row: rowNumber,\r\n            $col$row: '$' + (col || '') + '$' + (row || '')\r\n        };\r\n\r\n        // mem fix - cache only the tl 100x100 square\r\n        if ((colNumber <= 100) && (rowNumber <= 100)) {\r\n            this._hash[value] = address;\r\n            this._hash[address.$col$row] = address;\r\n        }\r\n\r\n        return address;\r\n    },\r\n\r\n    // convert r,c into structure (if only 1 arg, assume r is address string)\r\n    getAddress: function(r, c) {\r\n        if (c) {\r\n            var address = this.n2l(c) + r;\r\n            return this.decodeAddress(address);\r\n        }\r\n        return this.decodeAddress(r);\r\n    },\r\n\r\n    // convert [address], [tl:br] into address structures\r\n    decode: function(value) {\r\n        var parts = value.split(':');\r\n        if (parts.length === 2) {\r\n            var tl = this.decodeAddress(parts[0]);\r\n            var br = this.decodeAddress(parts[1]);\r\n            var result = {\r\n                top: Math.min(tl.row, br.row),\r\n                left: Math.min(tl.col, br.col),\r\n                bottom: Math.max(tl.row, br.row),\r\n                right: Math.max(tl.col, br.col)\r\n            };\r\n            // reconstruct tl, br and dimensions\r\n            result.tl = this.n2l(result.left) + result.top;\r\n            result.br = this.n2l(result.right) + result.bottom;\r\n            result.dimensions = result.tl + ':' + result.br;\r\n            return result;\r\n        }\r\n        return this.decodeAddress(value);\r\n    },\r\n\r\n    // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\r\n    decodeEx: function(value) {\r\n        var groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\r\n\r\n        var sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\r\n        var reference = groups[3]; // Remaining address\r\n\r\n        var parts = reference.split(':');\r\n        if (parts.length > 1) {\r\n            var tl = this.decodeAddress(parts[0]);\r\n            var br = this.decodeAddress(parts[1]);\r\n            var top = Math.min(tl.row, br.row);\r\n            var left = Math.min(tl.col, br.col);\r\n            var bottom = Math.max(tl.row, br.row);\r\n            var right = Math.max(tl.col, br.col);\r\n\r\n            tl = this.n2l(left) + top;\r\n            br = this.n2l(right) + bottom;\r\n\r\n            return {\r\n                top: top,\r\n                left: left,\r\n                bottom: bottom,\r\n                right: right,\r\n                sheetName: sheetName,\r\n                tl: { address: tl, col: left, row: top, $col$row: '$' + this.n2l(left) + '$' + top, sheetName: sheetName },\r\n                br: { address: br, col: right, row: bottom, $col$row: '$' + this.n2l(right) + '$' + bottom, sheetName: sheetName },\r\n                dimensions: tl + ':' + br\r\n            };\r\n        } else if (reference.startsWith('#')) {\r\n            return sheetName ? {sheetName: sheetName, error: reference} : {error: reference};\r\n        }\r\n\r\n        var address = this.decodeAddress(reference);\r\n        return sheetName ? Object.assign({sheetName: sheetName}, address) : address;\r\n    },\r\n\r\n    // convert row,col into address string\r\n    encodeAddress: function(row, col) {\r\n        return colCache.n2l(col) + row;\r\n    },\r\n\r\n    // convert row,col into string address or t,l,b,r into range\r\n    encode: function() {\r\n        switch (arguments.length) {\r\n            case 2:\r\n                return colCache.encodeAddress(arguments[0], arguments[1]);\r\n            case 4:\r\n                return colCache.encodeAddress(arguments[0], arguments[1]) + ':' + colCache.encodeAddress(arguments[2], arguments[3]);\r\n            default:\r\n                throw new Error('Can only encode with 2 or 4 arguments');\r\n        }\r\n    }\r\n};"],"file":"col-cache.js"}