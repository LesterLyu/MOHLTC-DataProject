{"version":3,"sources":["../../moh.js/handsontable/formula-parser.js"],"names":["parser","formulaParser","Parser","on","cellCoord","done","hasOwnProperty","gui","sheetNames","includes","sheet","console","error","tables","indexOf","currSheet","data","getDataAtCell","row","index","column","result","startCellCoord","endCellCoord","log","label","fragment","colFragment","col","push"],"mappings":"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","sourcesContent":["var parser = new formulaParser.Parser();\r\n\r\n/**\r\n * cellCoord: {\r\n *     label: '',\r\n *     row: {index: Number, label: '', isAbsolute: Boolean},\r\n *     column: {index: Number, label: '', isAbsolute: Boolean},\r\n *     sheet: 'sheetName'  // if available\r\n * }\r\n */\r\nparser.on('callCellValue', function (cellCoord, done) {\r\n    //console.log('get ' + cellCoord.label);\r\n    if (cellCoord.hasOwnProperty('sheet')) {\r\n        if (!gui.sheetNames.includes(cellCoord.sheet)) {\r\n            console.error('Sheet name does not exist: ' + cellCoord.sheet);\r\n        }\r\n        var sheet = gui.tables[gui.sheetNames.indexOf(cellCoord.sheet)];\r\n    }\r\n    else {\r\n        sheet = gui.tables[gui.sheetNames.indexOf(gui.currSheet)];\r\n    }\r\n    var data = sheet.getDataAtCell(cellCoord.row.index, cellCoord.column.index);\r\n    if (data === null) {\r\n        done('')\r\n    }\r\n    else if (data.hasOwnProperty('result')) {\r\n        done(data.result);\r\n    }\r\n    else {\r\n        done(data);\r\n    }\r\n});\r\n\r\n\r\nparser.on('callRangeValue', function (startCellCoord, endCellCoord, done) {\r\n    console.log('get range ' + startCellCoord.label + ' to ' + endCellCoord.label);\r\n    var fragment = [];\r\n\r\n    // find sheet\r\n    if (startCellCoord.hasOwnProperty('sheet')) {\r\n        if (!gui.sheetNames.includes(startCellCoord.sheet)) {\r\n            console.error('Sheet name does not exist: ' + startCellCoord.sheet);\r\n        }\r\n        var sheet = gui.tables[gui.sheetNames.indexOf(startCellCoord.sheet)];\r\n    }\r\n    else {\r\n        sheet = gui.tables[gui.sheetNames.indexOf(gui.currSheet)];\r\n    }\r\n\r\n    // find data\r\n    for (var row = startCellCoord.row.index; row <= endCellCoord.row.index; row++) {\r\n        var colFragment = [];\r\n\r\n        for (var col = startCellCoord.column.index; col <= endCellCoord.column.index; col++) {\r\n            var data = sheet.getDataAtCell(row, col);\r\n            //console.log(data);\r\n            if (data === null) {\r\n                colFragment.push('')\r\n            }\r\n            else if (data.hasOwnProperty('result')) {\r\n                colFragment.push(data.result);\r\n            }\r\n            else {\r\n                colFragment.push(data);\r\n            }\r\n        }\r\n        fragment.push(colFragment);\r\n    }\r\n    done(fragment)\r\n});\r\n\r\n"],"file":"formula-parser.js"}