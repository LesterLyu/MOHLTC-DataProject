{"version":3,"sources":["../../moh.js/handsontable/formula-editor.js"],"names":["TextEditor","Handsontable","editors","FormulaEditor","prototype","extend","prepare","row","col","prop","td","originalValue","cellProperties","rawValue","undefined","hasOwnProperty","type","apply","formula","getValue","TEXTAREA","value","setValue","newValue","saveValue","ctrlDown","length","charAt","console","log","instance","setDataAtCell","slice","calculated","parser","parse","error","result"],"mappings":"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","sourcesContent":["/**\r\n * FormulaEditor for handsonTable\r\n * Authon: Lester Lyu\r\n *\r\n * For object like:\r\n * {\r\n *     formula: '...',\r\n *     result: '...'\r\n * } OR\r\n *  string\r\n */\r\n\r\n// shorten the names\r\nvar TextEditor = Handsontable.editors.TextEditor;\r\n\r\n\r\n// FormulaEditor is a class function, inheriting form TextEditor\r\nvar FormulaEditor = TextEditor.prototype.extend();\r\n\r\n\r\nFormulaEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {\r\n    this.rawValue = {};\r\n    // set editor type\r\n    if (originalValue !== null && originalValue !== undefined && originalValue.hasOwnProperty('formula')) {\r\n        this.type = 'formula';\r\n        TextEditor.prototype.prepare.apply(this, [row, col, prop, td, originalValue.formula, cellProperties]);\r\n    }\r\n    else if (originalValue !== null && (typeof originalValue === 'string' || typeof originalValue === 'number')) {\r\n        this.type = 'text';\r\n        TextEditor.prototype.prepare.apply(this, [row, col, prop, td, originalValue, cellProperties]);\r\n    }\r\n    else {\r\n        TextEditor.prototype.prepare.apply(this, [row, col, prop, td, originalValue, cellProperties]);\r\n    }\r\n};\r\n\r\n\r\nFormulaEditor.prototype.getValue = function () {\r\n    return this.TEXTAREA.value;\r\n};\r\n\r\n\r\nFormulaEditor.prototype.setValue = function (newValue) {\r\n    if (this.type === 'formula') {\r\n        this.TEXTAREA.value = '=' + newValue;\r\n    }\r\n    else if (this.type === 'text') {\r\n        this.TEXTAREA.value = newValue;\r\n    }\r\n};\r\n\r\n\r\nFormulaEditor.prototype.saveValue = function (value, ctrlDown) {\r\n    // check if it is formula now\r\n    if (value[0][0] !== undefined && value[0][0].length > 0 && value[0][0].charAt(0) === '=') {\r\n        this.type = 'formula';\r\n        console.log('formula')\r\n    }\r\n    else {\r\n        this.type = 'text';\r\n    }\r\n\r\n    if (this.type === 'text') {\r\n        console.log(value);\r\n        return this.instance.setDataAtCell(this.row, this.col, value)\r\n        //return TextEditor.prototype.saveValue.apply(this, [value, ctrlDown]);\r\n    }\r\n    else if (this.type === 'formula') {\r\n        this.rawValue.formula = value[0][0].slice(1);\r\n        // re-evaluate the result\r\n        console.log(value[0][0]);\r\n        var calculated = parser.parse(this.rawValue.formula);\r\n        if (calculated.error) {\r\n            this.rawValue.result = calculated;\r\n        }\r\n        else {\r\n            this.rawValue.result = calculated.result;\r\n        }\r\n        console.log(this.rawValue)\r\n        this.instance.setDataAtCell(this.row, this.col, this.rawValue);\r\n    }\r\n};\r\n"],"file":"formula-editor.js"}